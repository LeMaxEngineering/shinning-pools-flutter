rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCompanyAdmin(companyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function isWorker(companyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'worker' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function isRootUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'root';
    }
    
    function isRequesterAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isRequesterWorker() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'worker';
    }

    // Users collection
    match /users/{userId} {
      // Read: A user can get their own profile. Root and Admins can get any user profile for validation.
      allow get: if isAuthenticated() && (request.auth.uid == userId || isRootUser() || isRequesterAdmin());

      // List: Root and Admins can list users (e.g., for searching by email).
      allow list: if isAuthenticated() && (isRootUser() || isRequesterAdmin());
      
      // Write: A user can create their own account, update their own profile. Root can also update/delete.
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isRootUser();
      allow delete: if isRootUser();
    }

    // Companies collection
    match /companies/{companyId} {
      allow read: if isAuthenticated() && (isCompanyAdmin(companyId) || isWorker(companyId) || isRootUser());
      allow create: if isAuthenticated() && isRootUser();
      allow update: if isAuthenticated() && (isCompanyAdmin(companyId) || isRootUser());
      allow delete: if isAuthenticated() && isRootUser();
    }

    // Customers collection - SECURE: Proper role-based access control
    match /customers/{customerId} {
      // Read: Company admins/workers can read customers in their company, root can read all
      allow read: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );
      
      // Create: Company admins can create customers for their company, root can create any
      allow create: if isAuthenticated() && (
        isCompanyAdmin(request.resource.data.companyId) || 
        isRootUser()
      );
      
      // Update: Company admins can update customers in their company, root can update any
      allow update: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser()
      );
      
      // Delete: Company admins can delete customers in their company, root can delete any
      allow delete: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser()
      );
    }

    // Workers collection
    match /workers/{workerId} {
      // Allow workers to read their own document, or company admins to read workers in their company
      allow read: if isAuthenticated() && (
        request.auth.uid == workerId || 
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser()
      );
      allow create: if isAuthenticated() && (
        // Company admin can create worker documents
        isCompanyAdmin(request.resource.data.companyId) ||
        // User can create their own worker document (for invitation acceptance)
        request.auth.uid == workerId ||
        // Root user can create any worker document
        isRootUser()
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == workerId || 
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser()
      );
      allow delete: if isAuthenticated() && (isCompanyAdmin(resource.data.companyId) || isRootUser());
    }

    // Worker Invitations collection
    match /worker_invitations/{invitationId} {
      allow read: if isAuthenticated() && (
        // User can read their own invitations
        resource.data.invitedUserId == request.auth.uid ||
        // Company admin can read invitations for their company
        isCompanyAdmin(resource.data.companyId) ||
        // Root user can read all invitations
        isRootUser()
      );
      
      allow create: if isAuthenticated() && 
        (request.resource.data.invitedByUserId == request.auth.uid) && (
        // Company admin can create invitations for their own company.
        isCompanyAdmin(request.resource.data.companyId) ||
        // Root user can create any invitation
        isRootUser()
      );
      
      allow update: if isAuthenticated() && (
        // User can update their own invitations (accept/reject)
        resource.data.invitedUserId == request.auth.uid ||
        // Company admin can update invitations for their company
        isCompanyAdmin(resource.data.companyId) ||
        // Root user can update all invitations
        isRootUser()
      );
      
      allow delete: if isAuthenticated() && (
        // Company admin can delete invitations for their company
        isCompanyAdmin(resource.data.companyId) ||
        // Root user can delete all invitations
        isRootUser()
      );
    }

    // Pools collection
    match /pools/{poolId} {
      // GET: A user can get a single pool doc if they are the owner, part of the company, or root.
      allow get: if isAuthenticated() && (
        isOwner(resource.data.ownerId) || 
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );

      // LIST: Allow workers and admins to list pools for their company
      // IMPORTANT: The app must filter by companyId in the query!
      allow list: if isAuthenticated() && (
        isRequesterAdmin() || 
        isRequesterWorker() ||
        isRootUser()
      );

      // WRITE: Company admins can create pools for their company. Others can update/delete based on role.
      allow create: if isAuthenticated() && (
        isCompanyAdmin(request.resource.data.companyId) || 
        isRootUser()
      );
      allow update: if isAuthenticated() && (
        isOwner(resource.data.ownerId) || 
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );
      allow delete: if isOwner(resource.data.ownerId) || isCompanyAdmin(resource.data.companyId) || isRootUser();
    }

    // Pool Maintenances collection
    match /pool_maintenances/{maintenanceId} {
      // Read: Allow authenticated users to read maintenance records
      // This is needed for the maintenance status query to work
      allow read: if isAuthenticated();
      
      // Update/Delete: More restrictive - only company admins, workers, and root
      allow update, delete: if (
        // Company Admin: can access if maintenance belongs to their company
        (isCompanyAdmin(resource.data.companyId))
        // Worker: can access if they are a worker
        || (isRequesterWorker())
        // Root user: always allowed
        || isRootUser()
      );
      
      // Create: Company admins, workers, and root can create
      allow create: if (
        // Company Admin: can create for their company
        (isCompanyAdmin(request.resource.data.companyId))
        // Worker: can create for their company and themselves
        || (isRequesterWorker() && request.resource.data.performedById == request.auth.uid)
        // Root user: always allowed
        || isRootUser()
      );
    }

    // Routes collection
    match /routes/{routeId} {
      allow create: if isAuthenticated() && (isCompanyAdmin(request.resource.data.companyId) || isRootUser());
      allow read: if isAuthenticated() && (isCompanyAdmin(resource.data.companyId) || isRootUser());
      
      // Update: Allow workers to update route status to CLOSED when completing maintenance
      allow update: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser() ||
        (isWorker(resource.data.companyId) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'closedAt']) &&
         request.resource.data.status == 'CLOSED')
      );
      
      allow delete: if isAuthenticated() && (isCompanyAdmin(resource.data.companyId) || isRootUser());
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.customerId) || 
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );
      allow create: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );
      allow update: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isWorker(resource.data.companyId) || 
        isRootUser()
      );
      allow delete: if isCompanyAdmin(resource.data.companyId) || isRootUser();
    }

    // Issue Reports collection
    match /issue_reports/{issueId} {
      // Read: Company admins can read their company's issues, workers can read their own, root can read all
      allow read: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        (isRequesterWorker() && resource.data.reportedBy == request.auth.uid) ||
        isRootUser()
      );
      
      // Create: Workers can create issues for their company, admins and root can create for any company
      allow create: if isAuthenticated() && (
        isRequesterWorker() ||
        isRequesterAdmin() || 
        isRootUser()
      );
      
      // Update: Company admins can update their company's issues, root can update all
      allow update: if isAuthenticated() && (
        isRequesterAdmin() || 
        isRootUser()
      );
      
      // Delete: Only root users can delete issue reports
      allow delete: if isRootUser();
      
      // List: Allow listing based on role
      allow list: if isAuthenticated() && (
        isRequesterAdmin() || 
        isRequesterWorker() ||
        isRootUser()
      );
    }

    // Assignments collection
    match /assignments/{assignmentId} {
      allow create: if isAuthenticated() && (isCompanyAdmin(request.resource.data.companyId) || isRootUser());
      
      // Read: Admins/root can read any assignment in their company. Workers can read their own.
      allow read: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser() ||
        (isWorker(resource.data.companyId) && resource.data.workerId == request.auth.uid)
      );

      // List: Allow listing assignments based on role
      allow list: if isAuthenticated() && (
        isRequesterAdmin() || 
        isRequesterWorker() ||
        isRootUser()
      );

      // Write: Admins/root can update or delete assignments. Workers can update their own assignments to CLOSED.
      allow update: if isAuthenticated() && (
        isCompanyAdmin(resource.data.companyId) || 
        isRootUser() ||
        (isWorker(resource.data.companyId) && 
         resource.data.workerId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'closedAt']) &&
         request.resource.data.status == 'CLOSED')
      );
      
      allow delete: if isAuthenticated() && (isCompanyAdmin(resource.data.companyId) || isRootUser());
    }
  }
}