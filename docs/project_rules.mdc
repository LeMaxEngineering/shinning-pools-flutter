---
description: 
globs: 
alwaysApply: true
---
# Chat AI

> NOTE: Current development is being done in Flutter (Dart), using Clean Architecture, Provider for state management, and Firebase Authentication (Google and email/password). The section on original technologies (Kotlin/Compose) is kept as historical reference.

I am creating an app to help people who have pool maintenance routes. This help will consist of:
- Generating optimized routes on a map to visit those pools.
- Keeping track of the maintenance performed on each pool (clients).
- Keeping track of purchases of materials and components needed to perform maintenance or improvements on the pools.

We will define pool maintenance as the actions to improve the condition of the water and all the electromechanical components that may be involved in a pool (for example: water pumps, water heaters, salt systems, chemicals used, pipes, and the electrical panels and their internal components for control).

"The goal of this app is to focus on 'Maintenance', which will ensure it delivers its core value: making pool maintenance easy, traceable, and professional for both businesses and employees."

I need a detailed and structured explanation of the app's flow and its features, written in Markdown format, so that a developer can easily understand and implement it. Use the content of my description to write this.

Before project configuration
::::::::::::::::::::::::::::
Technologies (historical):
- Jetpack Compose as the UI system.
- Material 3 as the design system.
- Kotlin as the programming language.
- Architecture Components' ViewModel for communication between the UI and the data layer.
- Hilt as the dependency injector.
- For persistent communications, we will use Room. Remember to use KSP and not KAPT for dependencies that generate code, such as the Room compiler.

Technologies (current):
- Flutter (Dart) for cross-platform development (Android, iOS, Web, Desktop)
- Clean Architecture for layer separation
- Provider for state management
- Firebase Authentication (Google and email/password)
- Custom design system (AppColors, AppTextStyles, appTheme)

Architecture:
We will use a simple architecture, where we will have:
- The UI in Compose. (historical)
- Communication with the data layer via MVVM. (historical)
- The data layer will be made up of repositories, which will hide the specific libraries being used.
- In Flutter, the UI is implemented with widgets and declarative navigation.
- Provider manages the global authentication and user state.
- Repositories abstract the data access logic (FirebaseAuthRepository).

Role of the AI:
Act as a senior full-stack software architect with extensive experience in multi-tenant SaaS, Flutter/React Native mobile apps, Google Maps API, relational databases (PostgreSQL), and role-based access control (RBAC).

General Objective:
Design the architecture, data model, and screen flow for a SaaS application that manages pool maintenance routes (with the possibility of adapting to other maintenance services).

The app must:
1. Support multiple company accounts (multi-tenant).
2. Allow multiple routes per account and assign each route to a registered worker.
3. Record each visit with:
   - Type(s) of maintenance performed (physical cleaning, chemical cleaning, filter washing; multiple selection).
   - Ingredients used (chlorine, algaecide, stain remover) and quantity.
   - Parts installed or changed (motor, filter, float).
4. Calculate the cost of the visit according to editable catalogs for each account.
5. Show the optimized route in Google Maps and mark each stop as completed in real time.

Key restrictions and rules:
- All initial lists (maintenance types, ingredients, parts) are copied from the base catalog, but each account can customize (CRUD) its own options.
- If an option has already been used in a report, it cannot be deleted (only disabled) to avoid breaking history.
- Each client can have one or more pools; each pool stores its monthly cost and geolocated address.
- There are three user levels per account:
   * Root (only me, platform owner) – sees and manages everything, including CRUD of accounts, plans, and global profiles.
   * Account administrator – manages users, catalogs, and clients/pools within their company.
   * Worker – only sees assigned routes and reports visits.

- The user profile module (CRUD) is only visible to root.
- Initial root module: CRUD of accounts with fields: name, status (active/suspended), billing plan, profile assignment.
- The app will be available in Spanish and English, selectable at any time.

Deliverables I need from you:
1. Entity-relationship diagram (text or PlantUML) with primary/foreign keys and integrity rules.
2. REST/GraphQL endpoint schema (includes JWT or similar authentication).
3. Screen flow (high-level wireframes) for: login, account dashboard, client manager, pool manager, route assignment, worker view, and report form.
4. Description of business logic for:
   * Main modules:
   * Route creation and optimization (Google Maps Directions API).
   * Visit cost calculation.
   * Restrictions on deleting used items.
5. Help in designing and creating the database, as well as choosing the most ideal database for the app.
6. Recommendations for technology stack (front-end, back-end, hosting, CI/CD), based on creation cost, production deployment, and app maintenance.
7. Migration and seed plan to clone base catalogs when creating an account.
8. Example RBAC policy (tables and claims in the token).

Response format:
Use clear numbered sections, tables for models, and pseudocode when appropriate. Be detailed but direct, in English.

# Project Rules and Guidelines

## Development Rules

### 1. Code Organization
- Follow Clean Architecture principles
- Maintain feature-based structure
- Keep shared components in appropriate directories
- Document all major components

### 2. Version Control
- Create meaningful commit messages
- Branch for each feature/fix
- Review code before merging
- Keep main branch stable

### 3. Testing
- Write unit tests for business logic
- Test on all target platforms
- Maintain test coverage
- Document test cases

### 4. Error Handling
- Implement proper error boundaries
- Add comprehensive logging
- Handle platform-specific errors
- Provide user-friendly error messages

### 5. Platform-Specific Development
- Test features on all platforms before merging
- Handle platform-specific initialization properly
- Document platform-specific requirements
- Implement appropriate fallbacks

### 6. Documentation
- Keep documentation up-to-date
- Document breaking changes
- Include setup instructions
- Maintain changelog

### 7. Performance
- Monitor app performance
- Optimize resource usage
- Handle memory management
- Implement proper caching

### 8. Security
- Follow security best practices
- Protect sensitive data
- Implement proper authentication
- Regular security reviews

### 9. Debugging Guidelines
- Use comprehensive logging
- Create minimal test cases
- Document debugging steps
- Track issue resolution

### 10. Code Review
- Review all changes
- Follow style guide
- Check for security issues
- Verify documentation

## Project Standards

### Coding Style
- Follow Flutter style guide
- Use consistent naming
- Comment complex logic
- Keep functions focused

### Architecture
- Maintain Clean Architecture
- Follow SOLID principles
- Use design patterns appropriately
- Keep components decoupled

### Testing Standards
- Unit tests for logic
- Widget tests for UI
- Integration tests for flows
- Platform-specific tests

### Documentation Standards
- Clear and concise
- Keep up-to-date
- Include examples
- Document edge cases

## Critical Procedures

### Debugging Process
1. Create minimal test case
2. Implement proper logging
3. Document reproduction steps
4. Test on all platforms
5. Verify fixes thoroughly

### Deployment Checklist
1. Test all platforms
2. Check performance
3. Verify security
4. Update documentation
5. Review changes

### Error Handling Protocol
1. Implement error boundaries
2. Add proper logging
3. Handle platform differences
4. Provide user feedback

### Platform-Specific Testing
1. Test web platform thoroughly
2. Verify mobile functionality
3. Check desktop features
4. Document platform differences

---
Last updated: June 2025




